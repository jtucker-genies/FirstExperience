!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["genies-typescript-compiler"]=t():e["genies-typescript-compiler"]=t()}(this,(()=>(()=>{"use strict";var e={71:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.convertToAssetsRelativePath=t.updateImportsToRelativePaths=t.isGeniesScriptType=t.getGeniesScriptTypeFromType=t.getIsUnityAPIDeclaration=t.getIsUnityAPIType=t.getIsValidUnityGenericTypeArg=t.extractProperties=t.getFullTypeName=t.getTypeNameAndEnsureImported=t.getUnaryOperatorMethodReturnType=t.isOrInheritsFromGameObjectOrComponent=t.getOperatorMethodReturnType=t.isGeniesEventType=t.isSignalBusType=t.getOperatorMethodName=t.traversePrototypeChain=t.removeDecorators=t.extendsScriptableObject=t.extendsMonoBehaviour=t.GeniesScriptType=t.UiInterfaceToEnumMap=t.AllowedUiInterfaces=t.GeniesScriptUiEvents=t.componentMethods=t.SET_ITEM_NAME=t.GET_ITEM_NAME=t.TooltipDecorator=t.SpaceDecorator=t.HeaderDecorator=t.SerializeFieldDecorator=t.HideInInspectorDecorator=t.NonSerializedDecorator=t.ScriptableObjectTypeName=t.MonobehaviourTypeName=t.GeniesInstancePropName=t.GeniesDeclarationFileAnnotation=void 0;const i=n(710),a=o(n(928));var l,c;function g(e){let t=e.getBaseClass();for(;t;){if("MonoBehaviour"===t.getName())return!0;t=t.getBaseClass()}return!1}function p(e){let t=e.getBaseClass();for(;t;){if("ScriptableObject"===t.getName())return!0;t=t.getBaseClass()}return!1}function u(e,t,n){var r;const s=function(e,t){const n=[],r=e.getSymbol();if(!r)return n;const s=r.getDeclarations();if(!s)return n;for(const e of s)if(i.Node.isClassDeclaration(e)){const r=e.getHeritageClauses();for(const e of r){const r=e.getTypeNodes();for(const e of r){const r=t.typeChecker.getTypeAtLocation(e);r&&n.push(r)}}}return n}(e,n);for(const e of s){const s=null===(r=e.getSymbol())||void 0===r?void 0:r.getName();if(s&&t.includes(s))return!0;if(u(e,t,n))return!0}return!1}function d(e,t=!0,n=!0){let r="";const s=e.getAliasSymbol();if(r=s?s.getName():e.getText(),["float","int","double","long","bool","string"].includes(r))switch(r){case"int":return"System.Int32";case"string":return"System.String";case"bool":return"System.Boolean";case"float":return"System.Single";case"long":return"System.Int64";case"double":return"System.Double";default:return r}const o=e.getSymbol();if(!o)return r;if(S(e))r=o.getFullyQualifiedName().replace(/['"]/g,"");else{const e=o.getDeclarations();let t=!1;if(e.forEach((e=>{(i.Node.isInterfaceDeclaration(e)||i.Node.isClassDeclaration(e))&&(t=e.isExported())})),!t&&e.length>0){const t=e[0].getSourceFile(),n=t.getFilePath(),s=v(t.getDirectoryPath(),n),i=a.parse(s),l=a.join(i.dir,i.name);r=`${l}.${o.getFullyQualifiedName().replace(/['"]/g,"")}`}else r=o.getFullyQualifiedName().replace(/['"]/g,"");r.indexOf("Assets/")>=0&&(r=r.slice(r.indexOf("Assets"))),r.indexOf("PackageCache/")>=0&&(r=r.slice(r.indexOf("PackageCache")).replace("PackageCache","Packages")),r.indexOf("GeniesSharedPackages/")>=0&&(r=r.slice(r.indexOf("GeniesSharedPackages")).replace("GeniesSharedPackages","Packages"))}const l=/\$\d+$/;if(t&&l.test(r)&&(r=r.replace(l,""),n)){const t=e.getTypeArguments();t.length>0&&(r+="<",t.forEach(((e,n)=>{let s=d(e);r+=s,n<t.length-1&&(r+=", ")})),r+=">")}return r}function y(e,n="",r=new Map){const s=[];return e.getProperties().forEach((e=>{const o=e.getScope(),a=A(e);if("private"===o&&!a.some((e=>e.Type===t.SerializeFieldDecorator)))return;if("public"===o&&a.some((e=>e.Type===t.NonSerializedDecorator)))return;const l=h(e.getType(),r),c=l.isArray(),g=T(l,r),p=d(g),u=e.getName();let y=n?`${n}.${u}`:u;function x(e){if(e.getKind()===i.SyntaxKind.NewExpression){const t=e;return`new ${d(t.getType())}(${t.getArguments().map((e=>e.getText())).join(", ")});`}return e.getText()}const S=[];if(e.hasInitializer()){const t=e.getInitializer();if(t)if(t.getKind()===i.SyntaxKind.ArrayLiteralExpression){const e=t;for(let t=0;t<e.getElements().length;t++){const n=e.getElements()[t];S.push(x(n))}}else S.push(x(t))}const E={Path:y,Name:u,TypeName:p,ChildProperties:[],IsArray:c,IsEnum:!1,EnumKeys:[],EnumValues:[],Decorators:A(e),IsGeniesBehaviourRef:!1,IsGeniesScriptableObjectRef:!1,Initializers:S,ArrayElementInitializer:void 0,ArrayDimension:-1};if(c){let e=1;return E.ArrayElementInitializer=f(l,p,u,y,e,r),E.ArrayDimension=e,void s.push(E)}m(g,E,r),s.push(E)})),s}function m(e,t,n){const r=e.isEnum(),s=e.getSymbol()||e.getAliasSymbol();if(!s)return;const o=s.getDeclarations()[0],a=E(o),l=N(o,a);if(t.IsGeniesBehaviourRef=l==c.Monobehaviour,t.IsGeniesScriptableObjectRef=l==c.ScriptableObject,!a&&l===c.None&&(r&&function(e,t){const{keys:n,values:r}=function(e){const t=e.getSymbol(),n=null==t?void 0:t.getDeclarations().find((e=>e.getKind()===i.SyntaxKind.EnumDeclaration));return n?{keys:n.getMembers().map((e=>e.getName())),values:n.getMembers().map((e=>e.getValue()))}:{keys:[],values:[]}}(t);e.EnumKeys=n,e.EnumValues=r.map((e=>void 0===e?"":e.toString())),e.IsEnum=!0}(t,e),s.getDeclarations().some((e=>i.Node.isClassDeclaration(e))))){const r=s.getDeclarations().find(i.Node.isClassDeclaration),o=r.getTypeParameters(),a=e.getTypeArguments(),l=new Map(n);o.forEach(((e,t)=>{const n=`${e.getName()}_${r.getName()}`;l.set(n,a[t])}));const c=[];let g=r;for(;g;){g.getName(),c.unshift(...y(g,t.Path,l));let e=g.getBaseClass();if(void 0===e)break;g=e}t.ChildProperties=c}}function f(e,t,n,r,s,o){let i=e.isArray()?e.getArrayElementType():e;i.isArray()||(i=T(i,o));let a=s;const l={Path:r+"_D"+s,Name:n,TypeName:t,ArrayDimension:s,ChildProperties:[],IsArray:i.isArray(),IsEnum:i.isEnum(),EnumKeys:[],EnumValues:[],Decorators:[],IsGeniesBehaviourRef:!1,IsGeniesScriptableObjectRef:!1,Initializers:[],ArrayElementInitializer:void 0};return i.isArray()?l.ArrayElementInitializer=f(i,t,n,r,++a,o):m(i,l,o),l}function h(e,t){var n,r;let s=e;if(s.isTypeParameter()){const e=null===(n=s.getSymbol())||void 0===n?void 0:n.getName(),o=null===(r=s.getSymbol())||void 0===r?void 0:r.getDeclarations()[0].getParent(),a=`${e}_${o&&i.Node.isClassDeclaration(o)?o.getName():""}`;a&&t.has(a)&&(s=t.get(a))}return s}function T(e,t){let n=e;for(;null==n?void 0:n.isArray();)n=n.getArrayElementType();return n=h(n,t),n}function x(e){const n=e.getFirstChild();if(!n)return console.log("No nodes found in the file."),!1;const r=n.getLeadingCommentRanges();return r.length>0&&r[0].getText()===t.GeniesDeclarationFileAnnotation}function S(e){const t=e.getSymbol();if(t)return x(t.getDeclarations()[0].getSourceFile())}function E(e){return x(e.getSourceFile())}function N(e,t){if(e.getKind()!==i.SyntaxKind.ClassDeclaration||t)return c.None;const n=e,r=g(n),s=p(n);return r?c.Monobehaviour:s?c.ScriptableObject:c.None}function b(e){const t=e.getSymbol();if(!t)return c.None;const n=t.getDeclarations();if(0===n.length)return c.None;const r=n[0];return N(r,E(r))}function v(e,t){const n=a.resolve(e,t),r=a.resolve("Assets");let s=a.relative(r,n);return s.startsWith("Assets"+a.sep)||(s=a.join("Assets",s)),s.split(a.sep).join("/")}function A(e){return e.getDecorators().map((e=>({Type:e.getName(),Args:e.getArguments().map((e=>e.getText()))})))}t.GeniesDeclarationFileAnnotation="//@Genies-UnityApiInterface",t.GeniesInstancePropName="__geniesInstance__",t.MonobehaviourTypeName="MonoBehaviour",t.ScriptableObjectTypeName="ScriptableObject",t.NonSerializedDecorator="NonSerialized",t.HideInInspectorDecorator="HideInInspector",t.SerializeFieldDecorator="SerializeField",t.HeaderDecorator="Header",t.SpaceDecorator="Space",t.TooltipDecorator="Tooltip",t.GET_ITEM_NAME="get_Item",t.SET_ITEM_NAME="set_Item",t.componentMethods=new Set(["GetComponent","TryGetComponent","GetComponentInChildren","GetComponentsInChildren","GetComponentInParent","GetComponentsInParent","GetComponents","AddComponent"]),function(e){e[e.None=0]="None",e[e.PointerClick=1]="PointerClick",e[e.PointerDown=2]="PointerDown",e[e.PointerEnter=4]="PointerEnter",e[e.PointerExit=8]="PointerExit",e[e.PointerUp=16]="PointerUp",e[e.BeginDrag=32]="BeginDrag",e[e.Deselect=64]="Deselect",e[e.Drag=128]="Drag",e[e.Drop=256]="Drop",e[e.EndDrag=512]="EndDrag",e[e.InitializePotentialDrag=1024]="InitializePotentialDrag",e[e.Scroll=2048]="Scroll",e[e.Select=4096]="Select",e[e.Submit=8192]="Submit",e[e.UpdateSelected=16384]="UpdateSelected",e[e.Move=32768]="Move",e[e.Cancel=65536]="Cancel"}(l||(t.GeniesScriptUiEvents=l={})),t.AllowedUiInterfaces=new Set(["UnityEngine.EventSystems.IPointerClickHandler","UnityEngine.EventSystems.IPointerDownHandler","UnityEngine.EventSystems.IPointerEnterHandler","UnityEngine.EventSystems.IPointerExitHandler","UnityEngine.EventSystems.IPointerUpHandler","UnityEngine.EventSystems.IBeginDragHandler","UnityEngine.EventSystems.IDeselectHandler","UnityEngine.EventSystems.IDragHandler","UnityEngine.EventSystems.IDropHandler","UnityEngine.EventSystems.IEndDragHandler","UnityEngine.EventSystems.IInitializePotentialDragHandler","UnityEngine.EventSystems.IScrollHandler","UnityEngine.EventSystems.ISelectHandler","UnityEngine.EventSystems.ISubmitHandler","UnityEngine.EventSystems.IUpdateSelectedHandler","UnityEngine.EventSystems.IMoveHandler","UnityEngine.EventSystems.ICancelHandler"]),t.UiInterfaceToEnumMap=new Map([["UnityEngine.EventSystems.IPointerClickHandler",l.PointerClick],["UnityEngine.EventSystems.IPointerDownHandler",l.PointerDown],["UnityEngine.EventSystems.IPointerEnterHandler",l.PointerEnter],["UnityEngine.EventSystems.IPointerExitHandler",l.PointerExit],["UnityEngine.EventSystems.IPointerUpHandler",l.PointerUp],["UnityEngine.EventSystems.IBeginDragHandler",l.BeginDrag],["UnityEngine.EventSystems.IDeselectHandler",l.Deselect],["UnityEngine.EventSystems.IDragHandler",l.Drag],["UnityEngine.EventSystems.IDropHandler",l.Drop],["UnityEngine.EventSystems.IEndDragHandler",l.EndDrag],["UnityEngine.EventSystems.IInitializePotentialDragHandler",l.InitializePotentialDrag],["UnityEngine.EventSystems.IScrollHandler",l.Scroll],["UnityEngine.EventSystems.ISelectHandler",l.Select],["UnityEngine.EventSystems.ISubmitHandler",l.Submit],["UnityEngine.EventSystems.IUpdateSelectedHandler",l.UpdateSelected],["UnityEngine.EventSystems.IMoveHandler",l.Move],["UnityEngine.EventSystems.ICancelHandler",l.Cancel]]),function(e){e[e.None=0]="None",e[e.Monobehaviour=1]="Monobehaviour",e[e.ScriptableObject=2]="ScriptableObject"}(c||(t.GeniesScriptType=c={})),t.extendsMonoBehaviour=g,t.extendsScriptableObject=p,t.removeDecorators=function(e,t){e.forEach((e=>{t(e)&&e.remove()}))},t.traversePrototypeChain=function(e){const t=new Set;let n=e;for(;n;){const e=d(n.getType());e&&t.add(e),n.getImplements().forEach((e=>{const n=[e.getType()];for(;n.length>0;){const e=n.shift();if(!e)continue;const r=d(e);r&&!t.has(r)&&(t.add(r),e.getBaseTypes().forEach((e=>{n.push(e)})))}})),n=n.getBaseClass()}return Array.from(t)},t.getOperatorMethodName=function(e){switch(e){case i.SyntaxKind.EqualsEqualsToken:return"op_Equality";case i.SyntaxKind.ExclamationEqualsToken:return"op_Inequality";case i.SyntaxKind.GreaterThanToken:return"op_GreaterThan";case i.SyntaxKind.LessThanToken:return"op_LessThan";case i.SyntaxKind.GreaterThanEqualsToken:return"op_GreaterThanOrEqual";case i.SyntaxKind.LessThanEqualsToken:return"op_LessThanOrEqual";case i.SyntaxKind.AmpersandToken:return"op_BitwiseAnd";case i.SyntaxKind.BarToken:return"op_BitwiseOr";case i.SyntaxKind.PlusToken:return"op_Addition";case i.SyntaxKind.MinusToken:return"op_Subtraction";case i.SyntaxKind.SlashToken:return"op_Division";case i.SyntaxKind.PercentToken:return"op_Modulus";case i.SyntaxKind.AsteriskToken:return"op_Multiply";case i.SyntaxKind.LessThanLessThanToken:return"op_LeftShift";case i.SyntaxKind.GreaterThanGreaterThanToken:return"op_RightShift";case i.SyntaxKind.CaretToken:return"op_ExclusiveOr";case i.SyntaxKind.ExclamationToken:return"op_LogicalNot";case i.SyntaxKind.TildeToken:return"op_OnesComplement";case i.SyntaxKind.PlusPlusToken:return"op_Increment";case i.SyntaxKind.MinusMinusToken:return"op_Decrement";default:return}},t.isSignalBusType=function(e){const t=e.getSymbol();return!!t&&"SignalBus"===t.getName()},t.isGeniesEventType=function(e){const t=e.getSymbol();return!!t&&"GeniesEvent"===t.getName()},t.getOperatorMethodReturnType=function(e,t,n){const r=e.getSymbol();if(!r)return null;let s=e.getText(),o=n.getText();const a=r.getDeclarations();for(const e of a)if(i.Node.isClassDeclaration(e)){const n=e.getMethods().filter((e=>e.getName()===t&&0===e.getTypeParameters().length));for(const e of n){const t=e.getParameters();if(2===t.length){const n=t[0].getType(),r=t[1].getType();if(n.getText()===s&&r.getText()===o)return e.getReturnType()}}}return null},t.isOrInheritsFromGameObjectOrComponent=function(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&(!!["GameObject","Component","MonoBehaviour"].includes(n.getName())||u(e,["GameObject","Component","MonoBehaviour"],t))},t.getUnaryOperatorMethodReturnType=function(e,t){const n=e.getSymbol();if(!n)return null;const r=n.getDeclarations();for(const n of r)if(i.Node.isClassDeclaration(n)){const r=n.getMethods().filter((e=>e.getName()===t&&0===e.getTypeParameters().length));for(const t of r){const n=t.getParameters();if(1===n.length&&n[0].getType().getText()===e.getText())return t.getReturnType()}}return null},t.getTypeNameAndEnsureImported=function(e,t){let n=e.getText(void 0,i.TypeFormatFlags.None),r="";if(["float","int","double","long","bool","string","number"].includes(n)){switch(n){case"int":n="Int32";break;case"bool":n="Boolean";break;case"float":n="Single";break;case"long":n="Int64";break;case"double":case"number":n="Double";break;case"string":n="String"}r="System"}else{const t=b(e);if(t!==c.None)switch(t){case c.Monobehaviour:n="MonoBehaviour",r="UnityEngine";break;case c.ScriptableObject:n="ScriptableObject",r="UnityEngine"}else{if(!S(e))throw new Error("Can't use non CSharp types");{const t=d(e),n=t.lastIndexOf(".");r=t.substring(0,n)}}}const s=t.getImportDeclarations().find((e=>e.getModuleSpecifierValue()===r));if(s)s.getNamedImports().some((e=>e.getName()===n))||s.addNamedImport(n);else{const e={kind:i.StructureKind.ImportDeclaration,moduleSpecifier:r,namedImports:[{name:n}]};t.addImportDeclaration(e)}return n},t.getFullTypeName=d,t.extractProperties=y,t.getIsValidUnityGenericTypeArg=function(e){let t="";const n=e.getAliasSymbol();return t=n?n.getName():e.getText(),!!["float","int","double","long","bool","string","number"].includes(t)||b(e)!==c.None||S(e)},t.getIsUnityAPIType=S,t.getIsUnityAPIDeclaration=E,t.getGeniesScriptTypeFromType=b,t.isGeniesScriptType=function(e){let t=b(e);return t===c.Monobehaviour||t===c.ScriptableObject},t.updateImportsToRelativePaths=function(e){const t=e.getDirectoryPath();e.getImportDeclarations().forEach((e=>{const n=e.getModuleSpecifierValue();if(n.startsWith("./")||n.startsWith("../")){const r=v(t,n);e.setModuleSpecifier(r)}}))},t.convertToAssetsRelativePath=v},105:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getGeniesSemanticDiagnostics=void 0;const s=n(710),o=r(n(985)),i=n(71),a=10001,l=10002,c=10003,g=10004,p=10005,u=10006,d=new Set(["MonoBehaviour","ScriptableObject"]),y=new Set(["GetComponent","TryGetComponent","GetComponentInChildren","GetComponentsInChildren","GetComponentInParent","GetComponentsInParent","GetComponents","AddComponent"]);function m(e,t,n,r){const s=t.getStart(),i=t.getWidth(),a={file:t.getSourceFile().compilerNode,start:s,length:i,messageText:n,category:o.default.DiagnosticCategory.Error,code:r,source:"Genies"};e.push(a)}t.getGeniesSemanticDiagnostics=function(e,t){if(!e)return[];const n=[];return function(e,t){e.getClasses().forEach((n=>{const r=n.getBaseClass(),s=n.getImplements(),c=null==r?void 0:r.getName();if(r&&(0,i.getIsUnityAPIType)(r.getType())&&c&&!d.has(c)){const s=r.getStart(),i=r.getWidth(),l=`Class '${n.getName()}' inherits from a Unity type '${r.getName()}' that is not 'MonoBehaviour' or 'ScriptableObject'.`,c={file:e.compilerNode,start:s,length:i,messageText:l,category:o.default.DiagnosticCategory.Error,code:a,source:"Genies"};t.push(c)}s.forEach((r=>{if((0,i.getIsUnityAPIType)(r.getType())){const s=(0,i.getFullTypeName)(r.getType());if(i.AllowedUiInterfaces.has(s))return;const a=r.getStart(),c=r.getWidth(),g=`Class '${n.getName()}' implements a forbidden Unity interface '${r.getText()}'.`,p={file:e.compilerNode,start:a,length:c,messageText:g,category:o.default.DiagnosticCategory.Error,code:l,source:"Genies"};t.push(p)}}))}))}(e,n),function(e,t){e.getDescendantsOfKind(s.SyntaxKind.CallExpression).forEach((e=>{!function(e,t){const n=e.getExpression();let r=[];if(s.Node.isPropertyAccessExpression(n)||s.Node.isIdentifier(n)){const e=n.getSymbol();e&&(r=e.getDeclarations().filter((e=>s.Node.isMethodDeclaration(e))))}if(0===r.length)return;if(!(r.filter((e=>e.getTypeParameters().length>0)).length>0))return;if(r=r.filter((e=>(0,i.getIsUnityAPIDeclaration)(e))),0===r.length)return;const o=function(e){return s.Node.isPropertyAccessExpression(e)?e.getName():s.Node.isIdentifier(e)?e.getText():""}(n);if(function(e,t){const n=t.getArguments().map((e=>e.getType())),r=t.getProject().getTypeChecker();return e.some((e=>{if(e.getTypeParameters().length>0)return!1;const t=e.getParameters();if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++){const s=t[e].getType(),o=n[e];if(!r.isTypeAssignableTo(o,s))return!1}return!0}))}(r,e))return;const a=e.getTypeArguments();if(0===a.length)return void m(t,e,`Generic method '${o}' must be called with type arguments.`,c);let l=r.map((e=>e.getTypeParameters().length));l.includes(a.length)||m(t,e,`Generic method '${o}' was provided the wrong number of arguments. Valid args counts: '${l.join(", ")}'`,u),y.has(o)?a.forEach((e=>{(function(e){const t=e.getType();if((0,i.getIsUnityAPIType)(t))return!0;if((0,i.getGeniesScriptTypeFromType)(t)===i.GeniesScriptType.Monobehaviour)return!0;const n=t.getSymbol();if(n){const e=n.getDeclarations();if(e&&e.length>0&&s.Node.isInterfaceDeclaration(e[0]))return!0}return!1})(e)||m(t,e,`Type arguments for method '${o}' must be a Unity API type, an interface, or a type that extends MonoBehaviour.`,g)})):a.forEach((e=>{const n=e.getType();(0,i.getIsValidUnityGenericTypeArg)(n)||m(t,e,`Type arguments for method '${o}' must be Unity API types.`,g)}))}(e,t)}))}(e,n),function(e,t){e.getDescendantsOfKind(s.SyntaxKind.NewExpression).forEach((e=>{const n=e.getType().getSymbol();if(!n)return;const r=n.getDeclarations();if(!r||0===r.length)return;const o=r.filter((e=>s.Node.isClassDeclaration(e)&&(0,i.getIsUnityAPIDeclaration)(e)&&e.getTypeParameters().length>0));if(0===o.length)return;const a=o[0].getTypeParameters().length,l=e.getTypeArguments(),c=l.length;0===c?m(t,e,`Generic class '${(0,i.getFullTypeName)(e.getType())}' must be instantiated with ${a} type argument(s).`,p):(c!==a&&m(t,e,`Generic class '${(0,i.getFullTypeName)(e.getType())}' expects ${a} type argument(s), but got ${c}.`,u),l.forEach((n=>{const r=n.getType();(0,i.getIsValidUnityGenericTypeArg)(r)||m(t,n,`Type arguments for type '${(0,i.getFullTypeName)(e.getType())}' must be Unity API types.`,u)})))}))}(e,n),n}},150:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=o(n(899)),a=n(71),l=n(710),c=n(113),g=n(538),p=n(340),u=n(780),d=n(195),y=n(371),m=n(58),f=n(551),h=n(452),T=n(821),x=n(24),S=n(105),E=n(286),N=n(682),b=n(325);t.default=class{constructor(e){this.project=new l.Project({tsConfigFilePath:e,skipAddingFilesFromTsConfig:!0});const t=this.project.getTypeChecker();this.transformationContext=new m.TransformationContext(t),this.transformers=[{phase:1,transformer:new p.RefTransformer},{phase:1,transformer:new x.EventContextTransformer},{phase:1,transformer:new E.DelegateToArrowFunctionTransformer},{phase:1,transformer:new b.BracketAccessTransformer},{phase:1,transformer:new c.PromiseWrapperTransformer},{phase:1,transformer:new g.ComponentCallTransformer},{phase:1,transformer:new h.ScriptableObjectCreateInstanceTransformer},{phase:1,transformer:new y.ExtensionMethodTransformer},{phase:1,transformer:new f.GeniesInstanceTransformer},{phase:2,transformer:new u.GenericTypeTransformer},{phase:3,transformer:new T.OperatorOverloadingTransformer},{phase:4,transformer:new N.NumericOverloadResolutionTransformer},{phase:5,transformer:new d.GenericMethodTransformer}]}compile(e,t){this.project.addSourceFilesAtPaths(e),this.project.addSourceFilesAtPaths(t);let n=new Set,r=new Set,s=new Map;e.forEach((e=>{const t=this.project.getSourceFileOrThrow(e);this.collectFiles(t,n,r,s)}));const o=this.topologicalSort(Array.from(n),s);let i=new Map;return o.forEach((e=>{this.setDefaultExport(e),(0,a.updateImportsToRelativePaths)(e),this.initializeCompileOutput(i,e)})),n.forEach((e=>{this.emit(i,e)})),JSON.stringify({outputs:[...i.values()]})}setDefaultExport(e){const t=e.getDefaultExportSymbol();let n=null;if(t&&(n=t.getDeclarations().find((e=>e.getKind()===i.SyntaxKind.ClassDeclaration))),null==n)for(const t of e.getClasses())if(((0,a.extendsMonoBehaviour)(t)||(0,a.extendsScriptableObject)(t))&&!t.isDefaultExport()){t.setIsDefaultExport(!0);break}}groupTransformersByPhase(){return this.transformers.reduce(((e,t)=>{const{phase:n}=t;return e[n]||(e[n]=[]),e[n].push(t),e}),{})}runTransformers(e){const t=this.groupTransformersByPhase();for(const n of Object.keys(t).sort(((e,t)=>Number(e)-Number(t)))){const r=Number(n),s=t[r];let o=0,i=!0;for(;i;){i=!1,o++;const t=e.getDescendants();for(let e=0;e<t.length;e++){let n=t[e],r=n;if(i)break;s.forEach((({transformer:s})=>{r.wasForgotten()?i=!0:!r.wasForgotten()&&s.nodeTypes.includes(r.getKind())&&(r=s.transformNode(r,this.transformationContext),r!==n&&(i=!0,t[e]=r))}))}i&&console.log(`Phase ${r}: Retrying transformation due to forgotten nodes. Attempt ${o}`)}}}initializeCompileOutput(e,t){const n=this.getGeniesDiagnostics(t);0===n.length&&this.runTransformers(t);const r=t.getDefaultExportSymbol();let s;r&&(s=r.getDeclarations().find((e=>e.getKind()===i.SyntaxKind.ClassDeclaration)));let o=!1,l=!1,c="";void 0!==s&&(o=(0,a.extendsMonoBehaviour)(s),l=(0,a.extendsScriptableObject)(s),c=(0,a.getFullTypeName)(s.getType()));const g=[];let p=[],u=a.GeniesScriptUiEvents.None;if(o||l&&s){let e=s;for(;e;){const t=e.getName();if(t==a.MonobehaviourTypeName||t==a.ScriptableObjectTypeName)break;g.unshift(...(0,a.extractProperties)(e)),e=e.getBaseClass()}p=(0,a.traversePrototypeChain)(s),(null==p?void 0:p.length)>0&&p.forEach((e=>{a.UiInterfaceToEnumMap.has(e)&&(u|=a.UiInterfaceToEnumMap.get(e))}))}e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:n,JsSource:"",IsMonobehaviour:o,IsScriptableObj:l,Properties:g,Id:t.getFilePath(),DefaultTypeName:c,InheritanceChain:p,SupportedUiEvents:u})}emit(e,t){var n;const r=[a.NonSerializedDecorator,a.HideInInspectorDecorator,a.SerializeFieldDecorator,a.HeaderDecorator,a.SpaceDecorator,a.TooltipDecorator];t.getClasses().forEach((e=>{(0,a.removeDecorators)(e.getDecorators(),(e=>r.includes(e.getName()))),e.getProperties().forEach((e=>{(0,a.removeDecorators)(e.getDecorators(),(e=>r.includes(e.getName())))}))}));const s=this.getDiagnostics(t);let o=t.getEmitOutput().getOutputFiles()[0].getText();if(e.has(t)){let r=e.get(t),i=(null!==(n=r.Errors)&&void 0!==n?n:[]).concat(s);r.IsSuccessful=0===i.length,r.Errors=i,r.JsSource=o}else e.set(t,{FilePath:t.getFilePath(),IsSuccessful:0===s.length,Errors:s,JsSource:o,IsMonobehaviour:!1,IsScriptableObj:!1,Properties:[],Id:t.getFilePath(),DefaultTypeName:"",InheritanceChain:[],SupportedUiEvents:a.GeniesScriptUiEvents.None})}getGeniesDiagnostics(e){return(0,S.getGeniesSemanticDiagnostics)(e,this.project.getTypeChecker()).map((t=>{var n;const r=null!==(n=t.start)&&void 0!==n?n:0,{line:s,column:o}=e.getLineAndColumnAtPos(r),i=this.flattenDiagnosticMessageText(t.messageText);return`${e.getFilePath()} (${s},${o}): ${i}`}))}getDiagnostics(e){return e.getPreEmitDiagnostics().map((e=>e.compilerObject)).map((t=>{var n;const r=null!==(n=t.start)&&void 0!==n?n:0,{line:s,column:o}=e.getLineAndColumnAtPos(r),i=this.flattenDiagnosticMessageText(t.messageText);return`${e.getFilePath()} (${s},${o}): ${i}`}))}flattenDiagnosticMessageText(e){return"string"==typeof e?e:i.flattenDiagnosticMessageText(e,"\n")}collectFiles(e,t,n,r){const s=e.getFilePath();n.has(s)||(n.add(s),t.add(e),r.has(e)||r.set(e,new Set),e.getReferencingSourceFiles().forEach((s=>{this.collectFiles(s,t,n,r),r.has(s)||r.set(s,new Set),r.get(s).add(e)})))}topologicalSort(e,t){try{return this.topologicalSortWithTarjan(e,t)}catch(e){return console.error(`Topological Sort Failed: ${e}`),[]}}topologicalSortWithCycles(e,t){const n=new Map,r=new Map,s={value:0},o=[],i=new Set,a=[],l=e=>{if(n.set(e,s.value),r.set(e,s.value),s.value++,o.push(e),i.add(e),(t.get(e)||new Set).forEach((t=>{n.has(t)?i.has(t)&&r.set(e,Math.min(r.get(e),n.get(t))):(l(t),r.set(e,Math.min(r.get(e),r.get(t))))})),r.get(e)===n.get(e)){const t=[];let n;do{if(n=o.pop(),void 0===n)break;i.delete(n),t.push(n)}while(n!==e);a.push(t)}};return e.forEach((e=>{n.has(e)||l(e)})),a}topologicalSortWithTarjan(e,t){const n=this.topologicalSortWithCycles(e,t),r=[];for(let e=n.length-1;e>=0;e--)r.push(...n[e]);return r}}},229:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(n(150));!function(){const e=process.argv.slice(2);let t,n=[],r=[],o=null;for(const s of e)"--tsconfig"===s||"-t"===s?o="tsconfig":"-c"===s||"--compile"===s?o="compile":"-p"===s||"--project"===s?o="project":"tsconfig"===o?(t=s,o=null):"compile"===o?n.push(s):"project"===o&&r.push(s);t&&0!==n.length||(console.error("Usage: node index.js --tsconfig <tsconfigPath> -c <file1> [<file2> [...]] -p <additionalFile1> [<additionalFile2> [...]]"),process.exit(1));try{const e=new s.default(t).compile(n,r);process.stdout.write(e.toString())}catch(e){console.error("Compilation failed:",e),process.exit(1)}}()},325:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BracketAccessTransformer=void 0;const r=n(710),s=n(71);t.BracketAccessTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.ElementAccessExpression]}transformNode(e,t){if(!r.Node.isElementAccessExpression(e))return e;const n=e,o=n.getExpression(),i=n.getArgumentExpression();if(!i)return e;const a=o.getType();if(!(0,s.getIsUnityAPIType)(a))return e;const l=a.getSymbol();if(!l)return e;const c=l.getDeclarations().filter((e=>r.Node.isClassDeclaration(e)||r.Node.isInterfaceDeclaration(e)));if(0===c.length)return e;const g=[],p=[],u=new Set;if(c.forEach((e=>{e.getMethods().forEach((e=>{var t;const n=e.getName();if(n===s.GET_ITEM_NAME||n===s.SET_ITEM_NAME){const r=null===(t=e.getSignature().getDeclaration())||void 0===t?void 0:t.getText();r&&!u.has(r)&&(n===s.GET_ITEM_NAME?g.push(e):p.push(e),u.add(r))}}))})),0===g.length&&0===p.length)return e;const d=n.getParent();if(r.Node.isBinaryExpression(d)&&d.getOperatorToken().getKind()===r.SyntaxKind.EqualsToken&&d.getLeft()===n){if(0===p.length)return e;const n=d.getRight();if(!p.find((e=>{const r=e.getParameters();if(2!==r.length)return!1;const s=r[0].getType(),o=r[1].getType(),a=i.getType(),l=n.getType(),c=t.typeChecker;return c.isTypeAssignableTo(a,s)&&c.isTypeAssignableTo(l,o)})))return e;const r=o.getText(),a=i.getText(),l=n.getText(),c=`${r}.${s.SET_ITEM_NAME}(${a}, ${l})`;return d.replaceWithText(c),d}{if(0===g.length)return e;if(!g.find((e=>{const n=e.getParameters();if(1!==n.length)return!1;const r=n[0].getType(),s=i.getType();return t.typeChecker.isTypeAssignableTo(s,r)})))return e;const r=o.getText(),a=i.getText(),l=`${r}.${s.GET_ITEM_NAME}(${a})`;return n.replaceWithText(l),n}}}},538:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentCallTransformer=void 0;const r=n(710),s=n(71);t.ComponentCallTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){let n=e;if(r.Node.isCallExpression(e)){const o=e,i=o.getExpression(),a=o.getTypeArguments(),l=o.getArguments();if(a.length>0||this.isTypeofArgument(l)){const e=i.getLastChildByKind(r.SyntaxKind.Identifier);if(!e)return n;const c=e.getText();if(s.componentMethods.has(c)){const e=i.getFirstChild();if(!e)return n;const r=t.typeChecker.getTypeAtLocation(e);if((0,s.isOrInheritsFromGameObjectOrComponent)(r,t)){const e=t.typeChecker.getTypeAtLocation(o);if(a.length>0){const r=a[0],s=t.typeChecker.getTypeAtLocation(r);n=this.processTypeArgument(o,s,!1,e)}else if(this.isTypeofArgument(l)){const r=this.getTypeFromTypeofArgument(l[0]);if(r){const s=t.typeChecker.getTypeAtLocation(r);n=this.processTypeArgument(o,s,!0,e)}}}}}}return n}isTypeofArgument(e){return e.length>0&&e[0].getText().startsWith("$typeof(")}getTypeFromTypeofArgument(e){const t=e.getFirstChildByKind(r.SyntaxKind.CallExpression);if(t){const e=t.getArguments()[0];if(r.Node.isTypeNode(e))return e}}processTypeArgument(e,t,n,r){if((0,s.getIsUnityAPIType)(t)){if(n)return e;const o=t.isInterface()?`$typeof("${(0,s.getFullTypeName)(t)}")`:`$typeof(${this.getTypeName(t)})`;return this.createOverloadedCallExpression(e,`${o}`,r)}if(t.isInterface()){const n=(0,s.getFullTypeName)(t);return this.createOverloadedCallExpression(e,`"${n}"`,r,!0)}if((0,s.getGeniesScriptTypeFromType)(t)===s.GeniesScriptType.Monobehaviour){const n=(0,s.getFullTypeName)(t);return this.createOverloadedCallExpression(e,`"${n}"`,r,!0)}return e}getTypeName(e){const t=e.getSymbol();return t?t.getName():e.getText()}createOverloadedCallExpression(e,t,n,r=!1){const s=n.getText();e.getTypeArguments().forEach((t=>{e.removeTypeArgument(t)})),e.insertArgument(0,t);const o=`(${e.getText()} as ${s})`,i=e.replaceWithText(o);if(r){const e=i.getSourceFile(),t=i.getStart();e.insertText(t,"// @ts-ignore\n")}return i}}},286:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DelegateToArrowFunctionTransformer=void 0;const r=n(710),s=n(71);t.DelegateToArrowFunctionTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=n.getExpression();if(r.Node.isPropertyAccessExpression(i)){const t=i.getExpression(),n=o.getTypeAtLocation(t);if((0,s.isSignalBusType)(n)||(0,s.isGeniesEventType)(n))return e}const a=o.getResolvedSignature(n);if(!a)return e;const l=a.getParameters();return n.getArguments().map(((e,t)=>{const s=l[t];if(s){const t=o.getTypeOfSymbolAtLocation(s,n);if(this.isDelegateType(t)&&!r.Node.isArrowFunction(e))return this.wrapInArrowFunction(e,t)}return e})),n}isDelegateType(e){return e.getCallSignatures().length>0}wrapInArrowFunction(e,t){const n=t.getCallSignatures();if(0===n.length)throw new Error("Expected delegate type to have call signatures.");const r=n[0].getParameters().map((e=>e.getName())).join(", "),s=`(${r}) => ${e.getText()}(${r})`;return console.log(`Wrapping in arrow function: ${s}`),e.replaceWithText(s)}}},24:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventContextTransformer=void 0;const r=n(710),s=n(71);t.EventContextTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=n.getExpression();if(r.Node.isPropertyAccessExpression(i)){const e=i.getName(),t=i.getExpression(),a=o.getTypeAtLocation(t),l=(0,s.isSignalBusType)(a)&&("subscribe"===e||"unsubscribe"===e),c=(0,s.isGeniesEventType)(a)&&("addListener"===e||"removeListener"===e);if(l||c){const e=n.getArguments(),t=l?1:0;if(e.length>t&&r.Node.isPropertyAccessExpression(e[t])){const r=e[t],s=this.getContextExpression(r);n.addArgument(`//@ts-ignore\n${s.getText()}`)}}}return n}getContextExpression(e){return r.Node.isPropertyAccessExpression(e)?e.getExpression():e}}},371:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtensionMethodTransformer=void 0;const r=n(710),s=n(71);t.ExtensionMethodTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){let n=e;if(e.getKind()===r.SyntaxKind.CallExpression){const t=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.getExpression();if(o.getKind()===r.SyntaxKind.PropertyAccessExpression){const i=o.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression),a=i.getName(),l=i.getExpression(),c=l.getType(),g=i.getSymbol();if(g){const o=g.getDeclarations().filter((e=>e.getKind()==r.SyntaxKind.MethodSignature)).map((e=>e));let i;if(!(o.length>0))return n;if(o.filter((e=>!(e.getJsDocs().flatMap((e=>e.getTags()))||[]).some((e=>"extension"===e.getTagName())))).length>0)return n;if(i=o[0],i){const r=(i.getJsDocs().flatMap((e=>e.getTags()))||[]).find((e=>"extension"===e.getTagName()));if(r){const o=r.getCommentText(),{extensionClass:g,extensionMethod:p,typeParameters:u}=this.parseExtensionComment(o,a),d=e.getSourceFile(),y=this.extractAndOrderTypeArguments(l,t,i,u),m=t.getArguments(),f=g.split("."),h=f.pop()||"",T=f.join(".");this.ensureImport(d,h,T);const x=(0,s.isGeniesScriptType)(c)?"//@ts-ignore\n"+l.getText()+"."+s.GeniesInstancePropName:l.getText(),S=m.map((e=>e.getFullText())).join(", "),E=y.length>0?`${h}.${p}<${y.join(", ")}>(${x}, ${S})`:`${h}.${p}(${x}, ${S})`;n=t.replaceWithText(E)}}}}}return n}parseExtensionComment(e,t){if(!e)return{extensionClass:"",extensionMethod:t,typeParameters:[]};const n=e.match(/^(?<namespace>[a-zA-Z_]\w*(?:\.[a-zA-Z_]\w*)*)\.(?<method>[a-zA-Z_]\w*)\s*(?:<(?<arguments>[^>]*)>)?$/);if(n&&n.groups){const{namespace:e,method:t,arguments:r}=n.groups;return{extensionClass:e,extensionMethod:t,typeParameters:r?r.split(",").map((e=>e.trim())):[]}}return{extensionClass:"",extensionMethod:t,typeParameters:[]}}ensureImport(e,t,n){const r=e.getImportDeclarations();let s=!1;for(const e of r)if(e.getModuleSpecifier().getLiteralText()===n){s=!0,e.getNamedImports().some((e=>e.getName()===t))||e.addNamedImport(t);break}s||e.addImportDeclaration({namedImports:[{name:t}],moduleSpecifier:n})}extractAndOrderTypeArguments(e,t,n,r){const s=e.getType(),o=s.getTypeArguments(),i=s.getSymbolOrThrow().getDeclaredType().getTypeArguments(),a=new Map;o.forEach(((e,t)=>{const n=i[t];n&&a.set(n.getText(),e.getText())}));const l=t.getTypeArguments(),c=n.getTypeParameters();return l.forEach(((e,t)=>{const n=c[t];n&&a.set(n.getText(),e.getText())})),r.map((e=>a.get(e)||e))}}},195:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericMethodTransformer=void 0;const r=n(710),s=n(71);t.GenericMethodTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.sourceFileGenericMap=new Map}transformNode(e,t){let n=e;if(e.getKind()===r.SyntaxKind.CallExpression){const o=e.asKindOrThrow(r.SyntaxKind.CallExpression),i=o.getExpression(),a=i.getLastChildByKind(r.SyntaxKind.Identifier);if(a){const e=a.getText();if(s.componentMethods.has(e)){const e=i.getFirstChild();if(e){const r=t.typeChecker.getTypeAtLocation(e);if((0,s.isOrInheritsFromGameObjectOrComponent)(r,t))return n}}}if(i.getKind()===r.SyntaxKind.PropertyAccessExpression){const a=i.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression);let l=a.getName();const c=a.getSymbol(),g=a.getExpression(),p=g.getType();if(!c)return n;const u=t.getSwapOverload(o);u&&(l=u.methodSwapValue);const d=c.getDeclarations();if(!(d.length>0))return n;{const r=d[0];if(!(0,s.getIsUnityAPIDeclaration)(r))return n;const i=r.getParent().getType(),a=o.getArguments(),c=o.getTypeArguments();if(c.length>0){const u=e.getSourceFile();this.sourceFileGenericMap.has(u)||this.sourceFileGenericMap.set(u,new Map);const d=c.map((e=>e.getType()));if(this.hasMatchingNonGenericOverload(r,d,a))n=this.replaceWithNonGenericCall(o,d,a,t);else{let e=[];const d=this.createGenericMethodVariable(i,l,c,u,e,t);let y;y=t.lastGenericTypeVarIndex.has(u)?t.lastGenericTypeVarIndex.get(u):this.getLastImportIndex(u)+1;const m=u.getStatements().length;y=Math.min(y,m),u.insertVariableStatements(y,e),t.lastGenericTypeVarIndex.set(u,y+e.length);const f=a.map((e=>e.getFullText())).join(", "),h=r.isStatic(),T=(0,s.isGeniesScriptType)(p)&&!h?"//@ts-ignore\n"+g.getText()+"."+s.GeniesInstancePropName:g.getText(),x=h?`${d}(${f})`:`${d}.call(${T}, ${f})`;n=o.replaceWithText(x)}}}}}return n}getTypeName(e){var t,n;return null!==(n=null===(t=e.getSymbol())||void 0===t?void 0:t.getName())&&void 0!==n?n:e.getText()}getTypeKey(e,t){return`${this.getTypeName(e)}$${t.map((e=>{let t=e.getTypeArguments();return t.length>0?this.getTypeKey(e,t):this.getTypeName(e)})).join("$")}`}getKey(e,t,n){return`${this.getTypeName(e)}$${t}$${n.map((e=>this.getTypeName(e.getType()))).join("$")}`}createGenericMethodVariable(e,t,n,o,i,a){const l=this.getTypeName(e),c=this.getKey(e,t,n),g=this.sourceFileGenericMap.get(o);if(!g.has(c)){const e=`$genericMethod(${l}, "${t}", ${n.map((e=>(0,s.getIsUnityAPIType)(e.getType())&&e.getType().isInterface()?`$typeof("${(0,s.getFullTypeName)(e.getType())}")`:this.getTypeNameAndEnsureImported(e.getType(),o,a))).join(", ")})`,p=`_${c.replace(/\$/g,"_")}`;g.set(c,p),i.push({declarationKind:r.VariableDeclarationKind.Const,declarations:[{name:p,initializer:e}]})}return g.get(c)}getTypeNameAndEnsureImported(e,t,n){if(n.sourceFileGenericTypeMap.has(t)){let r=n.sourceFileGenericTypeMap.get(t),s=e.getTypeArguments(),o=this.getTypeKey(e,s);if(r.has(o))return r.get(o)}return(0,s.getTypeNameAndEnsureImported)(e,t)}getLastImportIndex(e){const t=e.getStatements();let n=-1;return t.forEach(((e,t)=>{e.getKind()===r.SyntaxKind.ImportDeclaration&&(n=t)})),n}hasMatchingNonGenericOverload(e,t,n){const r=e.getParent(),o=e.getName(),i=r.getMethods().filter((e=>e.getName()===o&&0===e.getTypeParameters().length)),a="System.Type";for(const e of i){const r=e.getParameters();if(r.filter((e=>(0,s.getFullTypeName)(e.getType())===a)).length===t.length&&r.length===t.length+n.length)return r.every(((e,r)=>r<t.length?(0,s.getFullTypeName)(e.getType())===a:e.getType().getText()===n[r-t.length].getType().getText()))}return!1}replaceWithNonGenericCall(e,t,n,o){const i=e.asKindOrThrow(r.SyntaxKind.CallExpression),a=i.getExpression().asKindOrThrow(r.SyntaxKind.PropertyAccessExpression),l=a.getName(),c=a.getExpression().getText(),g=t.map((t=>(0,s.getIsUnityAPIType)(t)&&t.isInterface()?`$typeof("${(0,s.getFullTypeName)(t)}")`:`$typeof(${this.getTypeNameAndEnsureImported(t,e.getSourceFile(),o)})`)).join(", "),p=n.map((e=>e.getText())).join(", "),u=`${c}.${l}(${g}${p?`, ${p}`:""}) as ${i.getReturnType().getText()}`;return e.replaceWithText(u)}}},780:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericTypeTransformer=void 0;const r=n(710),s=n(71);t.GenericTypeTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.NewExpression]}transformNode(e,t){let n=e;if(e.getKind()===r.SyntaxKind.NewExpression){const o=e.asKindOrThrow(r.SyntaxKind.NewExpression),i=o.getType(),a=o.getTypeArguments().map((e=>e.getType())),l=o.getArguments();if((0,s.getIsUnityAPIType)(i)&&a.length>0){const r=e.getSourceFile();t.sourceFileGenericTypeMap.has(r)||t.sourceFileGenericTypeMap.set(r,new Map);let s=[];const c=this.createGenericVariable(i,a,r,s,t);let g;g=t.lastGenericTypeVarIndex.has(r)?t.lastGenericTypeVarIndex.get(r):this.getLastImportIndex(r)+1;const p=r.getStatements().length;g=Math.min(g,p),r.insertVariableStatements(g,s),t.lastGenericTypeVarIndex.set(r,g+s.length);const u=`new ${c}(${l.map((e=>e.getFullText())).join(", ")}) as ${i.getText()}`;n=o.replaceWithText(u)}}return n}getTypeName(e){var t,n;return null!==(n=null===(t=e.getSymbol())||void 0===t?void 0:t.getName())&&void 0!==n?n:e.getText()}getKey(e,t){return`${this.getTypeName(e)}$${t.map((e=>{let t=e.getTypeArguments();return t.length>0?this.getKey(e,t):this.getTypeName(e)})).join("$")}`}createGenericVariable(e,t,n,s,o){const i=this.getTypeName(e),a=this.getKey(e,t),l=o.sourceFileGenericTypeMap.get(n);if(!l.has(a)){const e=`$generic(${i}, ${t.map((e=>this.getTypeNameAndEnsureImported(e,n,s,o))).join(", ")})`,c=`_${a.replace(/\$/g,"_")}`;l.set(a,c),s.push({declarationKind:r.VariableDeclarationKind.Const,declarations:[{name:c,initializer:e}]})}return l.get(a)}getTypeNameAndEnsureImported(e,t,n,r){return e.getTypeArguments().length>0?this.createGenericVariable(e,e.getTypeArguments(),t,n,r):(0,s.getTypeNameAndEnsureImported)(e,t)}getLastImportIndex(e){const t=e.getStatements();let n=-1;return t.forEach(((e,t)=>{e.getKind()===r.SyntaxKind.ImportDeclaration&&(n=t)})),n}}},551:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GeniesInstanceTransformer=void 0;const r=n(710),s=n(71);t.GeniesInstanceTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=o.getTypeAtLocation(n.getExpression());if(!(0,s.getIsUnityAPIType)(i))return e;const a=n.getArguments();return a.forEach(((e,t)=>{const n=o.getTypeAtLocation(e);if((0,s.isGeniesScriptType)(n)){const n=`//@ts-ignore\n${e.getText()}.${s.GeniesInstancePropName}`;a[t]=e.replaceWithText(n)}})),n}}},682:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NumericOverloadResolutionTransformer=void 0;const r=n(710),s=n(71);t.NumericOverloadResolutionTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e,o=n.getExpression();if(!r.Node.isPropertyAccessExpression(o)&&!r.Node.isIdentifier(o))return e;const i=(r.Node.isPropertyAccessExpression(o)?o.getNameNode():o).getSymbol();if(!i)return e;const a=i.getDeclarations().filter((e=>r.Node.isMethodDeclaration(e)));if(0===a.length)return e;const l=a[0];if(!(0,s.getIsUnityAPIDeclaration)(l))return e;const c=t.typeChecker,g=n.getArguments().map((e=>this.inferPossibleTypes(e,c,n))),p=this.selectBestOverload(a,g,c);if(!p)return e;const u=p.getJsDocs();let d;for(const e of u){const t=e.getTags();for(const e of t)if("methodSwap"===e.getTagName()){d=e.getCommentText();break}if(d)break}if(!d)return e;if(p.getTypeParameters().length>0)return t.setSwapOverload(n,{declaration:p,methodSwapValue:d}),e;const y=n.getArguments().map(((e,t)=>{const n=g[t],r=c.getTypeAtLocation(p.getParameters()[t]);return n.find((e=>this.typesAreEqual(e,r)))?e.getFullText():(n.some((e=>this.isCastable(e,r))),`(${e.getFullText()}) as ${r.getText()}`)}));let m;m=r.Node.isPropertyAccessExpression(o)?`${o.getExpression().getText()}.${d}`:d;const f=`// @ts-ignore\n${m}(${y.join(", ")})`;return n.replaceWithText(f)}inferPossibleTypes(e,t,n){const r=[],s=t.getTypeAtLocation(e);let o=[];const i=this.getNumericValue(e,n);if(void 0!==i)o=this.inferTypesFromNumericInfo(i);else{const e=this.getBrandedTypes(s,t);if(e.length>0)r.push(...e);else{if(!this.isNumberType(s))return r.push(s),r;o=["byte","sbyte","short","ushort","int","uint","float","double"]}}for(const e of o){const n=this.getTypeByName(e,t);n&&r.push(n)}return r}getNumericValue(e,t){const n=this.getNumericLiteralInfo(e);if(void 0!==n)return n;if(r.Node.isIdentifier(e)||r.Node.isPropertyAccessExpression(e)){const n=e.getSymbol();if(n){const e=n.getDeclarations();if(e&&e.length>0){const s=e[0];if(r.Node.isVariableDeclaration(s)||r.Node.isPropertyDeclaration(s)){const e=this.performFlowAnalysis(n,s,t);if(e)return e}}}}}performFlowAnalysis(e,t,n){let s;const o=t.getInitializer();if(o){const r=this.getNumericValueFromExpression(o,e,t,n);r&&(s=r)}const i=n.getFirstAncestorByKind(r.SyntaxKind.MethodDeclaration);if(!i)return s;const a=i.getStatements()||[],l=n.getStart();for(const o of a){if(o.getStart()>l)break;{const i=o.getDescendants().filter((e=>r.Node.isBinaryExpression(e)||r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)));for(const o of i)if(r.Node.isBinaryExpression(o)){const i=o.getOperatorToken().getKind(),a=o.getLeft(),l=o.getRight();if(this.isAssignmentToSymbol(a,e))if(i===r.SyntaxKind.EqualsToken){s=this.getNumericValueFromExpression(l,e,t,n,s)||void 0}else if([r.SyntaxKind.PlusEqualsToken,r.SyntaxKind.MinusEqualsToken,r.SyntaxKind.AsteriskEqualsToken,r.SyntaxKind.SlashEqualsToken,r.SyntaxKind.PercentEqualsToken].includes(i)){const r=this.getNumericValueFromExpression(l,e,t,n,s);if(r&&s){s=this.evaluateCompoundAssignment(i,s,r)||void 0}else s=void 0}}else if(r.Node.isPrefixUnaryExpression(o)||r.Node.isPostfixUnaryExpression(o)){const t=o.getOperatorToken(),n=o.getOperand();if(this.isAssignmentToSymbol(n,e))if(s){let e=t===r.SyntaxKind.PlusPlusToken?1:-1;s={value:s.value+e,hasDecimal:s.hasDecimal}}else s=void 0}}}return s}isAssignmentToSymbol(e,t){if(r.Node.isPropertyAccessExpression(e)){const n=e.getExpression();if(r.Node.isThisExpression(n))return e.getNameNode().getSymbol()===t}else if(r.Node.isIdentifier(e))return e.getSymbol()===t;return!1}getNumericValueFromExpression(e,t,n,s,o){if(r.Node.isNumericLiteral(e))return this.getNumericLiteralInfo(e);if(r.Node.isIdentifier(e)||r.Node.isPropertyAccessExpression(e)){if(this.isAssignmentToSymbol(e,t))return o;{const t=e.getSymbol();if(t){const n=t.getDeclarations();if(n&&n.length>0){const s=n[0];if(r.Node.isVariableDeclaration(s)||r.Node.isPropertyDeclaration(s))return this.performFlowAnalysis(t,s,e)}}}}else if(r.Node.isBinaryExpression(e)){const r=this.getNumericValueFromExpression(e.getLeft(),t,n,s,o),i=this.getNumericValueFromExpression(e.getRight(),t,n,s,o);if(r&&i){const t=e.getOperatorToken().getKind();return this.evaluateBinaryOperation(t,r,i)}}}evaluateCompoundAssignment(e,t,n){const s={[r.SyntaxKind.PlusEqualsToken]:r.SyntaxKind.PlusToken,[r.SyntaxKind.MinusEqualsToken]:r.SyntaxKind.MinusToken,[r.SyntaxKind.AsteriskEqualsToken]:r.SyntaxKind.AsteriskToken,[r.SyntaxKind.SlashEqualsToken]:r.SyntaxKind.SlashToken,[r.SyntaxKind.PercentEqualsToken]:r.SyntaxKind.PercentToken}[e];if(void 0!==s)return this.evaluateBinaryOperation(s,t,n)}evaluateBinaryOperation(e,t,n){let s,o=t.hasDecimal||n.hasDecimal;switch(e){case r.SyntaxKind.PlusToken:s=t.value+n.value;break;case r.SyntaxKind.MinusToken:s=t.value-n.value;break;case r.SyntaxKind.AsteriskToken:s=t.value*n.value;break;case r.SyntaxKind.SlashToken:s=t.value/n.value,o=!0;break;case r.SyntaxKind.PercentToken:s=t.value%n.value;break;default:return}if(void 0!==s)return{value:s,hasDecimal:o}}getNumericLiteralInfo(e){if(r.Node.isNumericLiteral(e)){const t=e.getText();return{value:Number(t),hasDecimal:t.includes(".")}}if(r.Node.isPrefixUnaryExpression(e)&&e.getOperatorToken()===r.SyntaxKind.MinusToken){const t=e.getOperand();if(r.Node.isNumericLiteral(t)){const e=t.getText();return{value:-Number(e),hasDecimal:e.includes(".")}}}}inferTypesFromNumericInfo(e){const{value:t,hasDecimal:n}=e,r=new Set;return n?(r.add("float"),r.add("double")):(t>=-2147483648&&t<=2147483647&&r.add("int"),t>=-32768&&t<=32767&&r.add("short"),t>=-128&&t<=127&&r.add("sbyte"),t>=0&&t<=255&&r.add("byte"),t>=0&&t<=65535&&r.add("ushort"),t>=0&&t<=4294967295&&r.add("uint")),Array.from(r)}isNumberType(e){return"number"===this.cleanTypeText(e.getText())}getTypeByName(e,t){const n=t.resolveName(e,void 0,r.SymbolFlags.All,!1);if(n)return t.getDeclaredTypeOfSymbol(n);console.log(`Global type '${e}' not found.`)}selectBestOverload(e,t,n){let r,s=-1;for(const o of e){const e=this.scoreOverload(o,t,n);e>s&&(s=e,r=o)}return r}scoreOverload(e,t,n){const r=e.getParameters();if(r.length!==t.length)return-1;let s=0;for(let e=0;e<r.length;e++){const o=n.getTypeAtLocation(r[e]),i=t[e];let a=-1;if(this.isValidType(o)){for(const e of i)this.typesAreEqual(e,o)?a=Math.max(a,2):this.isCastable(e,o)&&(a=Math.max(a,1));if(-1===a)return-1;s+=a}}return s}isValidType(e){if(e.isTypeParameter())return!1;const t=this.cleanTypeText(e.getText());return["byte","sbyte","short","ushort","int","uint","float","double","number"].includes(t)}typesAreEqual(e,t){return this.cleanTypeText(e.getText())===this.cleanTypeText(t.getText())}isCastable(e,t){var n,r;const s=this.cleanTypeText(e.getText()),o=this.cleanTypeText(t.getText());return null!==(r=null===(n={byte:["short","ushort","int","uint","float","double","number"],sbyte:["short","int","float","double","number"],short:["int","float","double","number"],ushort:["int","uint","float","double","number"],int:["float","double","number"],uint:["float","double","number"],float:["double","number"],double:["number"],number:["byte","sbyte","short","ushort","int","uint","float","double"]}[s])||void 0===n?void 0:n.includes(o))&&void 0!==r&&r}cleanTypeText(e){return e.replace(/&\s*\{[^}]*\}/,"").trim()}getBrandedTypes(e,t){const n=[],r=e.getText().match(/number\s*&\s*\{\s*__([a-zA-Z]+)Brand\?:\s*undefined\s*\}/);if(r){const e=r[1],s=this.getTypeByName(e,t);s&&n.push(s)}return n}}},821:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorOverloadingTransformer=void 0;const r=n(710),s=n(71);t.OperatorOverloadingTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.BinaryExpression,r.SyntaxKind.PrefixUnaryExpression,r.SyntaxKind.PostfixUnaryExpression]}transformNode(e,t){return r.Node.isBinaryExpression(e)?this.transformBinaryExpression(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?this.transformUnaryExpression(e,t):e}transformBinaryExpression(e,t){var n,o;const i=e.getOperatorToken().getKind(),a=(0,s.getOperatorMethodName)(i);if(a){if(i===r.SyntaxKind.EqualsEqualsEqualsToken||i===r.SyntaxKind.EqualsEqualsToken||i===r.SyntaxKind.ExclamationEqualsEqualsToken||i==r.SyntaxKind.ExclamationEqualsToken){const t=this.unwrapParenthesizedExpression(e.getRight());if(r.Node.isNullLiteral(t)||r.Node.isUndefinedKeyword(t))return e}const l=this.unwrapParenthesizedExpression(e.getLeft()),c=this.unwrapParenthesizedExpression(e.getRight()),g=this.transformNodeIfNeeded(l,t),p=this.transformNodeIfNeeded(c,t);let u=t.typeChecker.getTypeAtLocation(g),d=t.typeChecker.getTypeAtLocation(p);if(d.isLiteral()&&(d=t.typeChecker.getBaseTypeOfLiteralType(d)),u.isLiteral()&&(u=t.typeChecker.getBaseTypeOfLiteralType(u)),!(0,s.getIsUnityAPIType)(u)&&!(0,s.getIsUnityAPIType)(d))return e;const y=g.getText(),m=p.getText(),f=`${null===(n=u.getSymbol())||void 0===n?void 0:n.getName()}.${a}(${y}, ${m})`;if(this.isCompoundAssignment(i)){const t=l.getText(),n=this.getEquivalentOperatorKind(i),r=(0,s.getOperatorMethodName)(n),a=`${t} = ${null===(o=u.getSymbol())||void 0===o?void 0:o.getName()}.${r}(${t}, ${m})`;return e.replaceWithText(a)}if(r.Node.isBinaryExpression(g)||r.Node.isBinaryExpression(p)){const t=`(${f})`;return e.replaceWithText(t)}return e.replaceWithText(f)}return e}transformUnaryExpression(e,t){var n;const r=this.unwrapParenthesizedExpression(e.getOperand()),o=e.getOperatorToken(),i=(0,s.getOperatorMethodName)(o);if(i){const o=t.typeChecker.getTypeAtLocation(r);if((0,s.getUnaryOperatorMethodReturnType)(o,i)){const t=r.getText(),s=`(${null===(n=o.getSymbol())||void 0===n?void 0:n.getName()}.${i}(${t}))`;return e.replaceWithText(s)}}return e}transformNodeIfNeeded(e,t){const n=this.unwrapParenthesizedExpression(e);return r.Node.isBinaryExpression(n)||r.Node.isPrefixUnaryExpression(n)||r.Node.isPostfixUnaryExpression(n)?this.transformNode(n,t):n}unwrapParenthesizedExpression(e){return r.Node.isParenthesizedExpression(e)?this.unwrapParenthesizedExpression(e.getExpression()):e}isCompoundAssignment(e){return e>=r.SyntaxKind.FirstCompoundAssignment&&e<=r.SyntaxKind.LastCompoundAssignment}getEquivalentOperatorKind(e){switch(e){case r.SyntaxKind.PlusEqualsToken:return r.SyntaxKind.PlusToken;case r.SyntaxKind.MinusEqualsToken:return r.SyntaxKind.MinusToken;case r.SyntaxKind.AsteriskEqualsToken:return r.SyntaxKind.AsteriskToken;case r.SyntaxKind.SlashEqualsToken:return r.SyntaxKind.SlashToken;case r.SyntaxKind.PercentEqualsToken:return r.SyntaxKind.PercentToken;case r.SyntaxKind.AmpersandEqualsToken:return r.SyntaxKind.AmpersandToken;case r.SyntaxKind.BarEqualsToken:return r.SyntaxKind.BarToken;case r.SyntaxKind.CaretEqualsToken:return r.SyntaxKind.CaretToken;case r.SyntaxKind.LessThanLessThanEqualsToken:return r.SyntaxKind.LessThanLessThanToken;case r.SyntaxKind.GreaterThanGreaterThanEqualsToken:return r.SyntaxKind.GreaterThanGreaterThanToken;case r.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:return r.SyntaxKind.GreaterThanGreaterThanGreaterThanToken;default:throw new Error(`Unsupported compound operator: ${r.SyntaxKind[e]}`)}}}},113:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PromiseWrapperTransformer=void 0;const r=n(710);t.PromiseWrapperTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.AwaitExpression,r.SyntaxKind.CallExpression]}transformNode(e,t){const n=t.typeChecker;if(r.Node.isAwaitExpression(e)){const t=e,r=t.getExpression(),s=n.getTypeAtLocation(r);if(this.isPromise(s)){const e=this.getPromiseTypeArgument(s,n),o=e?`await $promise(${r.getText()}) as ${e}`:`await $promise(${r.getText()})`;return t.replaceWithText(`${o}`)}}else if(r.Node.isCallExpression(e)){const t=e,s=t.getExpression();if(r.Node.isPropertyAccessExpression(s)){const e=s.getName(),r=s.getExpression(),o=n.getTypeAtLocation(r);if(this.isPromise(o)&&this.isPromiseMethod(e)){this.getPromiseTypeArgument(o,n);const e=`$promise(${r.getText()})${t.getText().substring(r.getText().length)}`;return t.replaceWithText(e)}}}return e}isPromise(e){const t=e.getSymbol();if(!t)return!1;const n=t.getName();return"Task"===n||"Task$1"===n||"UniTask"===n||"UniTask$1"===n||"YieldAwaitable"===n}isPromiseMethod(e){return["then","catch","finally"].includes(e)}getPromiseTypeArgument(e,t){const n=e.getTypeArguments();if(1===n.length){const e=n[0],t=e.getSymbol();return t?t.getName():e.getText()}}}},340:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RefTransformer=void 0;const r=n(710);t.RefTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.BinaryExpression,r.SyntaxKind.PropertyAccessExpression]}transformNode(e,t){let n=e;if(r.Node.isBinaryExpression(e)&&e.getOperatorToken().getKind()===r.SyntaxKind.EqualsToken){const s=e,o=s.getLeft(),i=s.getRight();if(r.Node.isPropertyAccessExpression(o)&&"value"===o.getName()&&this.isRefType(o.getExpression(),t.typeChecker)){const t=o.getExpression().getText(),r=i.getText();n=e.replaceWithText(`$set(${t}, ${r})`)}}else if(r.Node.isPropertyAccessExpression(e)){const r=e;if("value"===r.getName()&&this.isRefType(r.getExpression(),t.typeChecker)){const t=r.getExpression().getText();n=e.replaceWithText(`$unref(${t})`)}}return n}isRefType(e,t){const n=t.getTypeAtLocation(e).getSymbol();return!!n&&"$Ref"===n.getName()}}},452:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScriptableObjectCreateInstanceTransformer=void 0;const r=n(710),s=n(71);t.ScriptableObjectCreateInstanceTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){let n=e;if(r.Node.isCallExpression(e)){const s=e,o=s.getExpression(),i=s.getTypeArguments(),a=s.getArguments();if(i.length>0||this.isTypeofArgument(a)){const e=o.getLastChildByKind(r.SyntaxKind.Identifier);if(!e)return n;const l=e.getText();if("CreateInstance"===l){const e=o.getFirstChild();if(!e)return n;const r=t.typeChecker.getTypeAtLocation(e);if(this.isScriptableObject(r,t)){const r=t.typeChecker.getTypeAtLocation(s);if(i.length>0){const o=i[0],a=t.typeChecker.getTypeAtLocation(o);n=this.processTypeArgument(s,a,!1,l,e,r)}else if(this.isTypeofArgument(a)){const o=this.getTypeFromTypeofArgument(a[0]);if(o){const i=t.typeChecker.getTypeAtLocation(o);n=this.processTypeArgument(s,i,!0,l,e,r)}}}}}}return n}isTypeofArgument(e){return e.length>0&&e[0].getText().startsWith("$typeof(")}getTypeFromTypeofArgument(e){const t=e.getFirstChildByKind(r.SyntaxKind.CallExpression);if(t){const e=t.getArguments()[0];if(r.Node.isTypeNode(e))return e}}processTypeArgument(e,t,n,r,o,i){if((0,s.getIsUnityAPIType)(t)){if(n)return e;const s=this.getTypeName(t),a=this.createOverloadedCallExpression(e,`$typeof(${s})`,r,o,i);return e.replaceWithText(a)}if((0,s.getGeniesScriptTypeFromType)(t)===s.GeniesScriptType.ScriptableObject){const n=this.getRelativePath(t),s=this.createOverloadedCallExpression(e,`"${n}"`,r,o,i,!0);return e.replaceWithText(s)}return e}isScriptableObject(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&("ScriptableObject"===n.getName()||this.inheritsFrom(e,["ScriptableObject"],t))}inheritsFrom(e,t,n){var r;const s=this.getBaseTypes(e,n);for(const e of s){const s=null===(r=e.getSymbol())||void 0===r?void 0:r.getName();if(s&&t.includes(s))return!0;if(this.inheritsFrom(e,t,n))return!0}return!1}getBaseTypes(e,t){const n=[],s=e.getSymbol();if(!s)return n;const o=s.getDeclarations();if(!o)return n;for(const e of o)if(r.Node.isClassDeclaration(e)){const r=e.getHeritageClauses();for(const e of r){const r=e.getTypeNodes();for(const e of r){const r=t.typeChecker.getTypeAtLocation(e);r&&n.push(r)}}}return n}getRelativePath(e){const t=e.getSymbol();if(!t)return"";const n=t.getDeclarations();if(0===n.length)return"";const r=n[0].getSourceFile(),o=r.getFilePath();return(0,s.convertToAssetsRelativePath)(r.getDirectoryPath(),o)}getTypeName(e){const t=e.getSymbol();return t?t.getName():e.getText()}createOverloadedCallExpression(e,t,n,r,s,o=!1){const i=e.getArguments().map((e=>e.getText())).join(", "),a=s.getText();let l=`(${r.getFullText()}.${n}(${t}${i?", "+i:""}) as ${a})`;return o&&(l=`${l}`),l}}},58:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TransformationContext=void 0,t.TransformationContext=class{constructor(e){this.sourceFileGenericTypeMap=new Map,this.lastGenericTypeVarIndex=new Map,this.overloadMap=new Map,this.typeChecker=e}setSwapOverload(e,t){this.overloadMap.set(e,t)}getSwapOverload(e){return this.overloadMap.get(e)}}},710:e=>{e.exports=require("ts-morph")},899:e=>{e.exports=require("typescript")},985:e=>{e.exports=require("typescript/lib/tsserverlibrary")},928:e=>{e.exports=require("path")}},t={};return function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(229)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,